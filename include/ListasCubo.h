
#ifndef LISTASCUBO_H
#define LISTASCUBO_H

using namespace std;

struct nodoCubo{
  Cubo cubo;
  struct nodoCubo *sig;
};

typedef struct nodoCubo *ListaCubo;


//REQUIERE QUE HAYA UNA LISTA CREADA Y RECIBE UN CUBO COMO PARAMETRO
void insertarCuboInicio(ListaCubo &lista, Cubo cubo);
//LA LISTA CONTIENE EL CUBO EN EL INICIO DE LA LISTA

//REQUIERE QUE HAYA UNA LISTA CREADA Y RECIBE UN CUBO COMO PARAMETRO
void insertarCuboFinal(ListaCubo &lista, Cubo cubo);
//LA LISTA CONTIENE EL CUBO EN EL FINAL DE LA LISTA

//REQUIERE QUE HAYA UNA LISTA CREADA
void mostrarListaCubo(ListaCubo &lista);
//MUESTRA POR CONSOLA CADA CUBO QUE CONTIENE LA LISTA

//REQUIERE QUE HAYA UNA LISTA CREADA
float plasticoTotalCubo(ListaCubo &lista);
//DEVUELVE EL TOTAL DE PLASTICO UTILIZADO EN ESTA LISTA

//REQUIERE QUE HAYA UNA LISTA CREADA Y UN COLOR
float plasticoPorColorCubo(ListaCubo &lista, string color);
//BUSCA DEPENDIENDO EL COLOR Y DEVUELVE EL TOTAL DE PLASTICO UTILIZADO CON ESE COLOR

//
void crearListaCubo(ListaCubo &lista);
//IGUALA LA LISTA A NULL PARA 

//REQUIERE QUE HAYA UNA LISTA CREADA, UN NUMERO ENTERO Y UN COLOR
void mostrarCuboPorNroOrdenColor(ListaCubo &lista, int numero, string color);
//MUESTRA UN ELEMENTO DE LA LISTA QUE COINCIDA CON LOS PARAMETROS

//REQUIERE QUE HAYA UNA LISTA CREADA
void ordenarListaPlasticoCubo(ListaCubo &lista);
//ORDENA LA LISTA POR LA CANTIDAD DE PLASTICO UTILIZADO

//REQUIERE QUE HAYA UNA LISTA CREADA Y QUE TENGA AL MENOS UN ELEMENTO
void eliminarPrimeroCubo(ListaCubo &lista);
//SACA EL PRIMER ELEMENTO DE LA LISTA 

//REQUIERE QUE HAYA UNA LISTA CREADA Y QUE TENGA AL MENOS UN ELEMENTO
Cubo getPrimerCubo(ListaCubo &lista);
//DEVUELVE EL PRIMER ELEMENTO DE LA LISTA

//REQUIERE QUE HAYA DOS LISTAS CREADAS Y QUE UNA TENGA AL MENOS UN ELEMENTO
void copiarListaCubo(ListaCubo &lista, ListaCubo &copia);
//LA LISTA COPIADA CONTENDRA LOS MISMOS VALORES QUE LA LISTA A COPIAR

#endif
